import argparse
import colorsys
from matplotlib import pyplot as plt
import pygraphviz as pgv
import hashlib
import matplotlib.colors as mcolors

def get_color(bbID):
    # Define a color mapping or generate colors based on bbID
    color_map = {
        '1': '#ffc230',  # Red
        '2': '#FFFFFF',  # Green
        '3': '#99aef7',  # Blue
        '4': '#74c762',  # Yellow
        '5': '#96ded3',  # Red
        '6': '#b996de',  # Green
        '7': '#de96ce',  # Blue

        # Add more mappings as needed
    }
    return color_map.get(bbID, '#000000')  # Default to white if bbID not in map

def mult_tuples(tuple1, tuple2):
    return tuple(x * y for x, y in zip(tuple1, tuple2))

def generate_color_from_map(bbID, colormap_name='terrain', num_colors=30):
    # Generate a color index from the bbID
    hash_value = int(hashlib.md5(bbID.encode()).hexdigest(), 16)
    index = hash_value % num_colors

    # Get the color map
    cmap = plt.get_cmap(colormap_name)
    
    # Get the color from the map
    # color = mcolors.to_hex(cmap(float(bbID)/30))
    color_tuple = cmap(index/30)
    color = mcolors.to_hex(color_tuple)
    # print(color)
    return color

def reorderNodes(input_file, output_file):
    # Create a graph from the DOT file
    graph = pgv.AGraph(input_file)

    # Dictionary to store nodes grouped by their 'group'
    nodes_by_group = {}

    # List to store edges
    edges = []

    # Iterate over nodes in the graph
    for node in graph.nodes():
        group = node.attr.get('group', 'default')
        bbID = node.attr.get('bbID', 'default')

        # Apply autogenerated color based on bbID
        # color = generate_color_from_map(bbID)
        # node.attr['fillcolor'] = color

        # Append the DOT line to the corresponding group in the dictionary
        nodes_by_group.setdefault(group, []).append(str(node))

    clusters = {}
    for node in graph.nodes():
        group = node.attr.get('group', 'default')
        if group != "External":
            if group not in clusters:
                clusters[group] = graph.add_subgraph(name=f"cluster_{group}", label=group)
            clusters[group].add_node(node)
        
    # Write the DOT file with clusters
    graph.write(output_file)

def main():
    parser = argparse.ArgumentParser(description="Process a DOT file and apply autogenerated colors based on bbID")
    parser.add_argument("input_file", help="Path to the input dot file")
    parser.add_argument("output_file", help="Path to the output dot file")

    args = parser.parse_args()
    reorderNodes(args.input_file, args.output_file)

if __name__ == "__main__":
    main()
